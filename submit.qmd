---
title: "Lab 9"
author: "Jayson De La O"
format:
  html:
    embed-resources: true
---

```{r}
library(microbenchmark)
library(parallel)
library(matrixStats)

```

```{r}
fun1 <- function(n = 100, k = 4, lambda = 4) {
  x <- NULL
  
  for (i in 1:n){
    x <- rbind(x, rpois(k, lambda))    
  }
  
  return(x)
}
fun1()

fun1alt <- function(n = 100, k = 4, lambda = 4) {
  # YOUR CODE HERE
  y<- NULL
 y<- matrix(rpois(n*k, lambda),n,k, FALSE)
 
return(y)
}
fun1alt()


```

Outputs are similar have the same dimensions and a similar distribution with a mean centered around 4.
```{r}
dim(fun1())
dim(fun1alt())

summary(fun1())
summary(fun1alt())
```

fun1alt() is much faster
```{r}
# Benchmarking

microbenchmark::microbenchmark(
  fun1(),
  fun1alt()
)
```
Limited functions output to the first 10 of 10,000 max columns values . Outputs are identical
```{r}
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
x <- matrix(rnorm(1e4), nrow=10)

# Find each column's max value
fun2 <- function(x) {
  apply(x, 2, max)
}
fun2(x)[1:10]

fun2alt <- function(x) {
  # YOUR CODE HERE
colMaxs(x)
  
}
fun2alt(x)[1:10]

```
fun2alt() is much faster
```{r}
# Benchmarking
microbenchmark::microbenchmark(
  fun2(x),
  fun2alt(x)
)
```

Parallelizing lapply function to run across multiple cores
```{r}
my_boot <- function(dat, stat, R, ncpus = 1L) {
  
  # Getting the random indices
  n <- nrow(dat)
  idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
  
  # THIS FUNCTION NEEDS TO BE PARALELLIZED
  # EDIT THIS CODE:
  #ans <- lapply(seq_len(R), function(i) {
  #  stat(dat[idx[,i], , drop=FALSE])
  #})
  
  
  ans <- mclapply(1:1L, function(i) {
    stat(dat[idx[,i], , drop=FALSE])
  },mc.cores=1L)
  
  # Converting the list into a matrix
  ans <- do.call(rbind, ans)

  return(ans)
}

```


similar outputs
```{r}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))

# DATA SIM
set.seed(1)
n <- 500; R <- 1e4

x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)

# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)

# You should get something like this
t(apply(ans1, 2, quantile, c(.025,.975)))
##                   2.5%      97.5%
## (Intercept) -0.1372435 0.05074397
## x            4.8680977 5.04539763
ans0
##                  2.5 %     97.5 %
## (Intercept) -0.1379033 0.04797344
## x            4.8650100 5.04883353
```
More cores=faster
```{r}
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
```

